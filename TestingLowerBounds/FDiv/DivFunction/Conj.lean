/-
Copyright (c) 2024 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import TestingLowerBounds.FDiv.DivFunction.DerivAtTop
/-!

# f-Divergences functions

-/

open Real MeasureTheory Filter Set MeasurableSpace

open scoped ENNReal NNReal Topology

namespace ProbabilityTheory

variable {Œ± Œ≤ : Type*} {mŒ± : MeasurableSpace Œ±} {mŒ≤ : MeasurableSpace Œ≤} {Œº ŒΩ : Measure Œ±}
  {f : ‚Ñù ‚Üí ‚Ñù}

namespace DivFunction

section Conj

noncomputable
def conjFn (f : DivFunction) :=
  (fun x ‚Ü¶ if x = 0 then f.derivAtTop else x * f x‚Åª¬π)

lemma ConjugateFnContinuousAt (f : DivFunction):
    ContinuousAt (conjFn f) 0 := by
  sorry

lemma conjFnContinuous (f : DivFunction):
    Continuous (conjFn f) := by
    rw [continuous_iff_continuousAt]
    intro x
    by_cases hx : x = 0
    ¬∑ rw [hx]; exact ConjugateFnContinuousAt f
    ¬∑
      have hx_pos : 0 < x := lt_of_le_of_ne (zero_le x) (Ne.symm hx)

      -- On a neighborhood of x, conjFn f y = y * f y‚Åª¬π
      have h_eq : conjFn f =·∂†[ùìù x] fun y ‚Ü¶ y * f y‚Åª¬π := by
        filter_upwards [isOpen_Ioi.mem_nhds hx_pos] with y hy
        unfold conjFn
        simp [hy.ne']

      rw [continuousAt_congr h_eq]

      -- Two cases:
      -- ¬∑ f 0 = 0
      --   Then f is constant 0 before 1
      --   Constant function is continuous
      -- ¬∑ f 0 ‚â† 0
      by_cases hf_zero : f 0 ‚â† 0
      ¬∑ apply ENNReal.Tendsto.mul
        ¬∑ -- 1. Identity function y ‚Ü¶ y is continuous
          exact continuousAt_id
        ¬∑ -- 2. Composition: y ‚Ü¶ f y‚Åª¬π is continuous
          simp [hx]
        ¬∑ apply Tendsto.comp
          . exact f.continuous.continuousAt.tendsto
          ¬∑ exact ContinuousAt.inv continuousAt_id
        ¬∑ by_cases hx_inf : x ‚â† ‚ä§
          ¬∑ exact Or.inr hx_inf
          ¬∑ simp at hx_inf
            rw [hx_inf]
            rw [ENNReal.inv_top]
            exact Or.inl hf_zero
      ¬∑ simp at hf_zero;
        have h := antitoneOn f
        rw [AntitoneOn] at h
        by_cases hx_one : x ‚â§ 1
        ¬∑ apply ENNReal.Tendsto.mul
          ¬∑ -- 1. Identity function y ‚Ü¶ y is continuous
            exact continuousAt_id
          ¬∑ -- 2. Composition: y ‚Ü¶ f y‚Åª¬π is continuous
            simp [hx]
          ¬∑ apply Tendsto.comp
            . exact f.continuous.continuousAt.tendsto
            ¬∑ exact ContinuousAt.inv continuousAt_id
          ¬∑ have hx_inf : x < ‚ä§ := lt_of_le_of_lt hx_one ENNReal.one_lt_top
            exact Or.inr hx_inf.ne
        ¬∑
          simp at hx_one
          have antitone := antitoneOn f
          rw [AntitoneOn] at antitone
          have f_zero_on_unit : ‚àÄ y ‚àà Set.Iio 1, f y = 0 := by
            intro y hy
            have h_antitone: f y ‚â§ f 0 := antitone (mem_Iic.mpr (zero_le_one' ‚Ñù‚â•0‚àû)) (mem_Iic_of_Iio hy) (zero_le y)
            rw [hf_zero] at h_antitone
            exact nonpos_iff_eq_zero.mp h_antitone
          have h_zero : (fun y ‚Ü¶ y * f y‚Åª¬π) =·∂†[ùìù x] fun _ ‚Ü¶ 0 := by
            filter_upwards [isOpen_Ioi.mem_nhds hx_one] with y hy
            have y_inv_lt_one : y‚Åª¬π < 1 := by
              rw [ENNReal.inv_lt_one]
              exact hy
            have y_inv_in_domain : y‚Åª¬π ‚àà Set.Iio 1 := y_inv_lt_one
            rw [f_zero_on_unit (y‚Åª¬π) y_inv_in_domain, mul_zero]
          rw [continuousAt_congr h_zero]
          exact continuousAt_const
        -- use monotonicity, simp, const_mul

lemma conjFnConvexIoi (f : DivFunction)  :
    ConvexOn ‚Ñù‚â•0 (Ioi 0) (conjFn f) := by
  -- #check EReal.coe_toENNReal_eq_max Why does this not work? It's in the docs.
  rw [ConvexOn]
  unfold conjFn
  constructor
  ¬∑ refine OrdConnected.convex ?left.hs; exact ordConnected_Ioi -- I have no idea what this means
  ¬∑ intro x hx y hy a b ha hb hab
    by_cases hxinf : (x ‚â† ‚ä§) ‚àß (y ‚â† ‚ä§)
    ¬∑ set z := a ‚Ä¢ x + b ‚Ä¢ y with hz
      have hz_pos : 0 < z := by
        simp only [z]
        by_cases hb_pos : 0 < b
        ¬∑
          cases' ha.eq_or_lt with ha_zero ha_pos
          ¬∑
            rw [‚Üê ha_zero, zero_smul, zero_add]
            exact smul_pos hb_pos (mem_Ioi.mp hy)
          ¬∑
            have hax_pos : 0 < a ‚Ä¢ x :=  ENNReal.mul_pos (ENNReal.coe_lt_coe.mpr ha_pos).ne' (mem_Ioi.mp hx).ne'
            have hby_pos : 0 < b ‚Ä¢ y :=  ENNReal.mul_pos (ENNReal.coe_lt_coe.mpr hb_pos).ne' (mem_Ioi.mp hy).ne'
            exact Right.add_pos' hax_pos hby_pos
        ¬∑
          have hb_zero : b = 0 := le_antisymm (le_of_not_gt hb_pos) hb
          simp [hb_zero, add_zero] at hab
          rw [hb_zero, zero_smul, add_zero, hab, one_smul]
          exact hx
      simp [hz_pos.ne', (Set.mem_Ioi.mp hx).ne', (Set.mem_Ioi.mp hy).ne']
      let w1 := a ‚Ä¢ x / z
      let w2 := b ‚Ä¢ y / z
      have hz_inf : z < ‚ä§ := by
        let c := a ‚Ä¢ x
        let d := b ‚Ä¢ y
        have ineq3 : c < ‚ä§ := by exact ENNReal.nnreal_smul_lt_top (lt_top_iff_ne_top.mpr hxinf.1)
        have ineq4 : d < ‚ä§ := by exact ENNReal.nnreal_smul_lt_top (lt_top_iff_ne_top.mpr hxinf.2)
        exact ENNReal.add_lt_top.mpr ‚ü®ineq3, ineq4‚ü©


      -- Fill in for hw_top : w1 ‚â† ‚ä§ ‚àß w2 ‚â† ‚ä§
      have hw_top : w1 ‚â† ‚ä§ ‚àß w2 ‚â† ‚ä§ := by
        constructor
        ¬∑ -- w1 = a ‚Ä¢ x / z ‚â† ‚ä§
          rw [ne_eq, ENNReal.div_eq_top]
          push_neg
          constructor
          ¬∑ exact (fun _ : a ‚Ä¢ x ‚â† 0 => hz_pos.ne')
          ¬∑ intro h
            rw [h] at hz
            simp at hz
            exact hz
        ¬∑ -- w2 = b ‚Ä¢ y / z ‚â† ‚ä§
          rw [ne_eq, ENNReal.div_eq_top]
          push_neg
          constructor
          ¬∑ exact (fun _ : b ‚Ä¢ y ‚â† 0 => hz_pos.ne')
          ¬∑ intro h
            rw [h] at hz
            simp at hz
            exact hz

      have hw_sum : w1 + w2 = 1 := by
        simp only [w1, w2, z]
        rw [ENNReal.div_add_div_same]
        rw [ENNReal.div_self]
        simp only [‚Üê hz]
        exact hz_pos.ne'
        refine lt_top_iff_ne_top.mp ?hI.a
        exact hz_inf

      have hw_sum_nnreal : w1.toNNReal + w2.toNNReal = 1 := by
        rw [‚Üê ENNReal.toNNReal_add hw_top.1 hw_top.2]
        rw [hw_sum]
        exact rfl

      have rhs_transform :=
        calc z * (w1 ‚Ä¢ f.toFun (1/x) + w2 ‚Ä¢ f.toFun (1/y))
        _ = z * ((a ‚Ä¢ x) * z‚Åª¬π * f.toFun (1/x) + (b ‚Ä¢ y) * z‚Åª¬π * f.toFun (1/y)) := by rfl
        _ = z * ((a ‚Ä¢ x) * z‚Åª¬π * f.toFun (1/x)) + z * ((b ‚Ä¢ y) * z‚Åª¬π * f.toFun (1/y)) := by simp [mul_add]
        _ = (z * ((a ‚Ä¢ x) * z‚Åª¬π)) * f.toFun x‚Åª¬π + (z * ((b ‚Ä¢ y) * z‚Åª¬π)) * f.toFun y‚Åª¬π := by simp; ac_rfl
        _ = (z * z‚Åª¬π) * (a ‚Ä¢ x) * f.toFun x‚Åª¬π + (z * z‚Åª¬π) * (b ‚Ä¢ y) * f.toFun y‚Åª¬π := by simp; ac_rfl
        _ = (a ‚Ä¢ x) * f.toFun x‚Åª¬π + (b ‚Ä¢ y) * f.toFun y‚Åª¬π := by simp only [ENNReal.mul_inv_cancel hz_pos.ne' hz_inf.ne]; simp
        _ = a ‚Ä¢ (x * f.toFun x‚Åª¬π) + b ‚Ä¢ (y * f.toFun y‚Åª¬π) := by simp

      have left_transform :=
        calc w1 ‚Ä¢ (1 / x) + w2 ‚Ä¢ (1 / y)
        _ = ((a ‚Ä¢ x) * z‚Åª¬π) * x‚Åª¬π + ((b ‚Ä¢ y) * z‚Åª¬π) * y‚Åª¬π := by
          simp [w1, w2, ENNReal.smul_def, div_eq_mul_inv]
        _ = (a ‚Ä¢ z‚Åª¬π) * (x * x‚Åª¬π) + (b ‚Ä¢ z‚Åª¬π) * (y * y‚Åª¬π) := by
          rw [ENNReal.smul_def, ENNReal.smul_def]
          simp [ENNReal.smul_def]
          ring_nf

        _ = (a ‚Ä¢ z‚Åª¬π) + (b ‚Ä¢ z‚Åª¬π) := by
          rw [ENNReal.mul_inv_cancel (mem_Ioi.mp hx).ne' hxinf.1]
          rw [ENNReal.mul_inv_cancel (mem_Ioi.mp hy).ne' hxinf.2]
          simp only [mul_one]
        _ = (a + b) ‚Ä¢ z‚Åª¬π := by
          -- #check ENNReal.add_smul
          have h1 : a ‚Ä¢ z‚Åª¬π ‚â† ‚ä§:= ENNReal.nnreal_smul_ne_top (ENNReal.inv_ne_top.mpr hz_pos.ne')
          have h2 : b ‚Ä¢ z‚Åª¬π ‚â† ‚ä§ :=  ENNReal.nnreal_smul_ne_top (ENNReal.inv_ne_top.mpr hz_pos.ne')
          rw [‚Üê(ENNReal.toNNReal_eq_toNNReal_iff' _ _)]
          rw [ENNReal.toNNReal_add]
          simp [add_mul]
          ¬∑ exact h1
          ¬∑ exact h2
          exact ENNReal.add_ne_top.mpr ‚ü®h1, h2‚ü©
          refine ENNReal.nnreal_smul_ne_top (ENNReal.inv_ne_top.mpr hz_pos.ne')

        _ = z‚Åª¬π := by
          rw [hab, one_smul]


      rw [‚Üêrhs_transform]
      refine mul_le_mul' (by exact Preorder.le_refl z) ?_
      rw [‚Üêleft_transform]

      let hw1_nnreal := w1.toNNReal
      let hw2_nnreal := w2.toNNReal
      rw [‚ÜêENNReal.coe_toNNReal hw_top.1]
      rw [‚ÜêENNReal.coe_toNNReal hw_top.2]
      apply f.convexOn.2
      exact trivial
      exact trivial
      exact zero_le hw1_nnreal
      exact zero_le hw2_nnreal
      exact hw_sum_nnreal
    rw [not_and_or] at hxinf
    cases' hxinf with hx_eq_top hy_eq_top

    ¬∑ -- Case: x = ‚àû
        -- simp [hx_eq_top]
        simp at hx_eq_top
        -- When x = ‚àû, we have x * f x‚Åª¬π = ‚àû * f 0
        -- The left side (a ‚Ä¢ ‚àû + b ‚Ä¢ y) * f (a ‚Ä¢ ‚àû + b ‚Ä¢ y)‚Åª¬π is also ‚àû * f 0 when a > 0
        by_cases ha_pos : 0 < a
        ¬∑ -- If a > 0, then a ‚Ä¢ ‚àû = ‚àû, so a ‚Ä¢ x + b ‚Ä¢ y = ‚àû
          have h_sum_top : a ‚Ä¢ x + b ‚Ä¢ y = ‚àû := by
            rw [hx_eq_top]
            simp [ENNReal.smul_def, ha_pos.ne']
          simp [h_sum_top, hx_eq_top, ha_pos.ne', (Set.mem_Ioi.mp hy).ne']
          have ineq :=
            calc (a ‚Ä¢ ‚ä§ + b ‚Ä¢ y) * f.toFun (a ‚Ä¢ ‚ä§ + b ‚Ä¢ y)‚Åª¬π
            _ = ‚ä§ * f.toFun 0 := by
              simp [ENNReal.smul_def, ha_pos.ne']
            _ = a ‚Ä¢ (‚ä§ * f.toFun 0) := by
              rw [‚Üê smul_mul_assoc]
              simp [ENNReal.smul_top, ha_pos.ne']
            _ ‚â§ a ‚Ä¢ (‚ä§ * f.toFun 0) + b ‚Ä¢ (y * f.toFun y‚Åª¬π) := by
              nth_rewrite 1 [‚Üê add_zero (a ‚Ä¢ (‚ä§ * f 0))]
              by_cases h : a ‚Ä¢ (‚ä§ * f 0) = ‚ä§
              ¬∑ simp
              ¬∑ rw [ENNReal.add_le_add_iff_left h]
                exact zero_le _
          exact ineq

        ¬∑ -- If a = 0, then the sum is b ‚Ä¢ y
          have ha_zero : a = 0 := le_antisymm (le_of_not_gt ha_pos) ha
          simp [ha_zero, hx_eq_top]
          rw [ha_zero] at hab
          simp at hab
          rw [hab, one_smul]
          -- Trivial case: y * f y‚Åª¬π ‚â§ y * f y‚Åª¬π
          simp
    ¬∑ -- Case: x = ‚àû
        simp at hy_eq_top
        by_cases hb_pos : 0 < b
        ¬∑ -- If a > 0, then a ‚Ä¢ ‚àû = ‚àû, so a ‚Ä¢ x + b ‚Ä¢ y = ‚àû
          have h_sum_top : a ‚Ä¢ x + b ‚Ä¢ y = ‚àû := by
            rw [hy_eq_top]
            simp [ENNReal.smul_def, hb_pos.ne']
          simp [h_sum_top, hy_eq_top, hb_pos.ne', (Set.mem_Ioi.mp hx).ne']
          have ineq :=
            calc (a ‚Ä¢ x + b ‚Ä¢ ‚ä§) * f.toFun (a ‚Ä¢ x + b ‚Ä¢ ‚ä§)‚Åª¬π
            _ = ‚ä§ * f.toFun 0 := by
              simp [ENNReal.smul_def, hb_pos.ne']
            _ = b ‚Ä¢ (‚ä§ * f.toFun 0) := by
              rw [‚Üê smul_mul_assoc]
              simp [ENNReal.smul_top, hb_pos.ne']

            _ ‚â§ a ‚Ä¢ (x * f.toFun x‚Åª¬π) + b ‚Ä¢ (‚ä§ * f.toFun 0) := by
              nth_rewrite 1 [‚Üê add_zero (b ‚Ä¢ (‚ä§ * f 0))]
              rw [add_comm]
              by_cases h : b ‚Ä¢ (‚ä§ * f 0) = ‚ä§
              ¬∑ simp
              ¬∑ rw [ENNReal.add_le_add_iff_right h]
                exact zero_le _

          exact ineq

        ¬∑ -- If a = 0, then the sum is b ‚Ä¢ y
          have hb_zero : b = 0 := le_antisymm (le_of_not_gt hb_pos) hb
          simp [hb_zero, hy_eq_top]
          rw [hb_zero] at hab
          simp at hab
          rw [hab, one_smul]
          -- Trivial case: y * f y‚Åª¬π ‚â§ y * f y‚Åª¬π
          simp


lemma conjFnConvex (f : DivFunction):
    ConvexOn ‚Ñù‚â•0 univ (conjFn f) := by
  rw [ConvexOn]
  constructor
  ¬∑ exact convex_univ
  ¬∑ intro x _ y _ a b ha hb0 hab

    have convex_on_open (x : ‚Ñù‚â•0‚àû) (hx : 0 < x)
    (y : ‚Ñù‚â•0‚àû) (hy : 0 < y) (a : ‚Ñù‚â•0) (b : ‚Ñù‚â•0)
    (ha : 0 ‚â§ a) (hb : 0 ‚â§ b) (hab : a + b = 1) :
      conjFn f (a ‚Ä¢ x + b ‚Ä¢ y) ‚â§ a ‚Ä¢ conjFn f x + b ‚Ä¢ conjFn f y := by

      have h2 : ‚àÄ r > 0, conjFn f r = (fun x ‚Ü¶ x * f x‚Åª¬π) r := by
        intro r hr
        unfold conjFn
        simp [hr.ne']

      have h_sum_pos : 0 < a ‚Ä¢ x + b ‚Ä¢ y := by
        by_cases hb_zero : b = 0
        ¬∑
          rw [hb_zero, add_zero] at hab
          rw [hb_zero, zero_smul, add_zero, hab, one_smul]
          exact hx
        ¬∑
          refine Right.add_pos_of_nonneg_of_pos ?_ ?_
          exact zero_le (a ‚Ä¢ x)
          refine (smul_pos_iff_of_pos_left (pos_iff_ne_zero.mpr hb_zero)).mpr hy

      rw [h2 (a ‚Ä¢ x + b ‚Ä¢ y) h_sum_pos, h2 x hx, h2 y hy]
      -- #check (Set.Ioi_subset_Ici_self) (convex_Ioi 0)
      have h_conv_finite := conjFnConvexIoi f
      have conv := h_conv_finite.2 (mem_Ioi.mpr hx) (mem_Ioi.mpr hy) ha hb hab
      simp [conjFn, h_sum_pos.ne', hx.ne', hy.ne'] at conv
      exact conv

    have main_claim (x : ‚Ñù‚â•0‚àû) (y : ‚Ñù‚â•0‚àû) (a : ‚Ñù‚â•0) (ha : 0 ‚â§ a) (b : ‚Ñù‚â•0) (hb0 : 0 ‚â§ b)
        (hab : a + b = 1) (hx_zero : x = 0) (hy_zero : y ‚â† 0) : (conjFn f (a ‚Ä¢ x + b ‚Ä¢ y) ‚â§ a ‚Ä¢ f.conjFn x + b ‚Ä¢ f.conjFn y) := by
      have hy_pos : 0 < y := lt_of_le_of_ne (zero_le y) (Ne.symm hy_zero)
      unfold conjFn
      simp [hx_zero, hy_zero]

      by_cases hb_zero : b = 0
      ¬∑
        rw [hb_zero, add_zero] at hab
        simp [hb_zero, hab]

      ¬∑
        have hby_pos : 0 < b ‚Ä¢ y := smul_pos (by positivity) hy_pos
        have hby_ne_zero : b ‚Ä¢ y ‚â† 0 := ne_of_gt hby_pos
        simp [hby_ne_zero, hb_zero]
        have h_bound : b ‚Ä¢ (y * f (b ‚Ä¢ y)‚Åª¬π) ‚â§ b ‚Ä¢( y * f y‚Åª¬π) + a ‚Ä¢ f.derivAtTop := by

          have h1 : (r : ‚Ñù‚â•0‚àû) ‚Üí (hr : r ‚â† 0) ‚Üí f.conjFn r = r * f (1 / r) := by
            intro r hr
            unfold conjFn
            simp [hr]

          have h3 : f.conjFn 0 = f.derivAtTop := by
            unfold conjFn
            simp [zero_le f.derivAtTop]

          have h_main : f.conjFn (b ‚Ä¢ y) ‚â§ a ‚Ä¢ f.conjFn 0 + b ‚Ä¢ f.conjFn y := by

            have h_eps : ‚àÄ Œµ > 0, f.conjFn (a ‚Ä¢ Œµ + b ‚Ä¢ y) ‚â§ a ‚Ä¢ f.conjFn Œµ + b ‚Ä¢ f.conjFn y := by
              intro Œµ hŒµ
              exact convex_on_open Œµ hŒµ y hy_pos a b ha hb0 hab
            have h_lim : Tendsto (fun Œµ => f.conjFn (a ‚Ä¢ Œµ + b ‚Ä¢ y)) (ùìù[>] 0) (ùìù (f.conjFn (b ‚Ä¢ y))) := by
              have h_cont : Continuous (fun x => a ‚Ä¢ x + b ‚Ä¢ y) := by
                exact (ENNReal.continuous_const_mul ENNReal.coe_lt_top.ne).add continuous_const
              have h_cont2 :  ContinuousAt (fun x => a ‚Ä¢ x + b ‚Ä¢ y) 0 := h_cont.continuousAt
              unfold ContinuousAt at h_cont2
              simp at h_cont2
              have h_seq_lim : Tendsto (fun Œµ => a ‚Ä¢ Œµ + b ‚Ä¢ y) (ùìù[>] 0) (ùìù (b ‚Ä¢ y)) :=
                tendsto_nhdsWithin_of_tendsto_nhds h_cont2
              have h_cont_at : ContinuousAt (f.conjFn) (b ‚Ä¢ y) := (conjFnContinuous f).continuousAt
              exact Tendsto.comp h_cont_at h_seq_lim

            have h_lim_rhs : Tendsto (fun Œµ => a ‚Ä¢ f.conjFn Œµ + b ‚Ä¢ f.conjFn y) (ùìù[>] 0)
              (ùìù (a ‚Ä¢ f.conjFn 0 + b ‚Ä¢ f.conjFn y)) := by
              have h_lim_conj : Tendsto (fun Œµ => f.conjFn Œµ) (ùìù[>] 0) (ùìù (f.conjFn 0)) := by
                exact (ConjugateFnContinuousAt f).tendsto.mono_left nhdsWithin_le_nhds
              have h : Continuous (fun Œµ ‚Ü¶ a ‚Ä¢ Œµ + b ‚Ä¢ f.conjFn y) := (ENNReal.continuous_const_mul ENNReal.coe_lt_top.ne).add continuous_const
              exact h.continuousAt.tendsto.comp h_lim_conj

            exact le_of_tendsto_of_tendsto h_lim h_lim_rhs (eventually_nhdsWithin_of_forall h_eps)
          rw [h1 y (hy_zero), h1 (b ‚Ä¢ y)  hby_pos.ne', h3] at h_main
          rw [add_comm] at h_main
          rw [one_div, one_div, smul_mul_assoc] at h_main
          exact h_main
        rw [add_comm]
        exact h_bound

    by_cases hx_zero : x = 0
    ¬∑ by_cases hy_zero : y = 0
      ¬∑
        simp [hx_zero, hy_zero, zero_smul]
        rw [‚Üê add_smul, hab, one_smul]
      ¬∑
        exact main_claim x y a ha b hb0 hab hx_zero hy_zero

    ¬∑
      have hx_pos : 0 < x := lt_of_le_of_ne (zero_le x) (Ne.symm hx_zero)

      by_cases hy_zero : y = 0
      ¬∑ rw [add_comm] at hab
        have convexity := main_claim y x b hb0 a ha hab hy_zero hx_zero
        rw [add_comm, add_comm (a ‚Ä¢ conjFn f x)]
        exact convexity

      ¬∑
        have hy_pos : 0 < y := lt_of_le_of_ne (zero_le y) (Ne.symm hy_zero)
        exact convex_on_open x hx_pos y hy_pos a b ha hb0 hab

noncomputable
def conj (f : DivFunction) : DivFunction where
  toFun x := conjFn f x
  one := by unfold conjFn; simp
  convexOn' := conjFnConvex f
  continuous' := conjFnContinuous f

end Conj

end DivFunction

end ProbabilityTheory
